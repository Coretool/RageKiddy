import sys
from time import sleep
import re
sys.path.append('..')
import clients

def strip_whitespaces(str):
    return ' '.join(str.split(''))

class Target(object):
    def __init__(self, username, password, ip):
        self.client = clients.metasploit.MSFClient(password, username=username)
        self.ip = ip
        self.services = []
        self.vulns = []
        self.exploits = []
        self.report = ''

    def add_services(self):
        """
        Add all services a host has
        """
        # first get the names
        names = str(self.client.console_execute('services -c name {0}\n'.format(self.ip))[b'data'])
        while not 'name' in names:
            sleep(10)
            names = self.client.console_read()
        names = names.split('\n')
        for row in names:
            if self.ip in row:
                row = strip_whitespaces(row)
                self.services.append({'name': row.split(' ')[1]})
        
        # get the ports by service name
        ports = str(self.client.console_execute('services -c port {0}\n'.format(self.ip))[b'data'])
        while not 'port' in ports:
            sleep(10)
            ports = self.client.console_read()
        ports = ports.split('\n')
        for row in ports:
            for service in self.services:
                if service['name'] in row:
                    row = strip_whitespaces(row)
                    service['port'] = row.split(' ')[1]
        
        # get some information by service name (only useful if a report shall be generated)
        info = str(self.client.console_execute('services -c info {0}\n'.format(self.ip))[b'data'])
        while not 'info' in info:
            sleep(10)
            info = self.client.console_read()
        info = info.split('\n')
        for row in infos:
            for servive in self.services:
                if service['name'] in row:
                    row = strip_whitespaces(row)
                    service['info'] = row.split(' ')[1]

    def add_vulns(self):
        """
        Add all vulnerabilites that were found.
        """
        vulns = str(self.client.console_execute('vulns \n')[b'data'])
        while not 'Time' in vulns:
            sleep(10)
            vulns = self.client.console_read()
        vulns = vulns.split('\n')
        for vuln in vulns:
            if self.ip in vuln:
                name = re.findall(r'name=[a-zA-Z0-9-]*', vuln)
                name = name.split('=')[1]

                refs = re.findall(r'refs=[a-zA-Z0-9-,]*', vuln)
                refs = refs.split('=')[1]
                refs = refs.split(',')

                self.vulns.append({'name': name, 'refs': refs})
    
    def resolve_vulns(self):
        """
        Search exploits for the vulnerabilites found.
        """
        for vuln in self.vulns:
            for ref in vuln.refs:
                if 'cve' in str.lower(ref):
                    results = str(self.client.console_execute('search cve:{0}\n'.format(ref))[b'data'])
                    while not 'Modules' in results:
                        sleep(10)
                        results = self.client.console_read()
                    results = results.split('\n')
                    for line inresults:
                        if 'exploit' in line:
                            self.exploits.append(line.split(' ')[0])

    def gen_report(self):
        """
        Generate a human readable report of all information that we have. (markdown)
        """
        self.report = '#Report for {0}\n'.format(self.ip)
        self.report += 'This report was generated by the chameleon pentest bot. We cannot grant 100% accurate results.\n'
        self.report += '###Services:\n'
        for service in self.services:
            self.report += '#####{0}:\n- Port: {1}\n- Info:{2}'.format(service.name, service.port, service.info)
        self.report += '###Vulnerabilities:\n'
        for vuln in self.vulns:
            self.report += '- {0}\n'.format(vuln.name)
        self.report += 'Open an issue for wrong results at github.com/coretool/chameleon.'

